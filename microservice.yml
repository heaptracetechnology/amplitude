omg: 1
lifecycle:
  startup:
    command: ["amplitude"]
info:
  version: 1.0.0
  title: Amplitude
  description: This is a amplitude service.
  contact:
    name: Rohit Shetty
    url: https://github.com/ht68rohit
    email: rohits@heaptrace.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
actions:
  event:
    help: Upload the event in amplitude.
    http:
      port: 3000
      method: post
      path: /event
      contentType: application/json
    arguments:
      userId:
        type: string
        in: requestBody
        help: A readable ID specified by you (example "abc@example.com" ) (required unless device_id is present).
      deviceId:
        type: string
        in: requestBody
        help: A device specific identifier, such as the Identifier for Vendor on iOS (required unless user_id is present). 
      eventType: 
        type: string
        in: requestBody
        required: true
        help: A unique identifier for your event.
      eventProperties: 
        type: map
        in: requestBody
        help: A map of key-value pairs that represent additional data to be sent along with the event(You can store property values in an array, and date values are transformed into string values.)
      userProperties: 
        type: map
        in: requestBody
        help: A dictionary of key-value pairs that represent additional data tied to the user.Each distinct value will show up as a user segment on the Amplitude dashboard.
      groups:
        type: map
        in: requestBody
        help: This feature is only available to Enterprise customers who have purchased the Accounts add-on.This field adds a map of key-value pairs that represent groups of users to the event as an event-level group.
      appVersion:
        type: string
        in: requestBody
        help: The version of your application the user is on.
      platform:
        type: string
        in: requestBody
        help: Platform of the device.
      osName:
        type: string
        in: requestBody
        help: The mobile operating system or browser the user is on.
      osVersion:
        type: string
        in: requestBody
        help: The version of the mobile operating system or browser the user is on.
      deviceBrand:
        type: string
        in: requestBody
        help: The device brand the user is on.
      deviceManufacturer:
        type: string
        in: requestBody
        help: The device manufacturer the user is on.
      deviceModel:
        type: string
        in: requestBody
        help: The device model the user is on.
      carrier:
        type: string
        in: requestBody
        help: Carrier of the device.
      city:
        type: string
        in: requestBody
        help: What city the user is in.
      country:
        type: string
        in: requestBody
        help: The country the user is in.
      region:
        type: string
        in: requestBody
        help: The geographical region the user is in.
      dma:
        type: string
        in: requestBody
        help: The Designated Market Area of the user.
      language:
        type: string
        in: requestBody
        help: The language the user has set.
      price:
        type: float
        in: requestBody
        help: The price of the item purchased. You can use negative values to indicate refunds. (required for revenue data if revenue is not sent) 
      quantity:
        type: int
        in: requestBody
        help: The quantity of the item purchased.(required for revenue data, defaults to 1 if not specified)
      revenue:
        type: float
        in: requestBody
        help: If you send all three fields of price, quantity, and revenue, then (price * quantity) will take precedence and be the revenue value. You can use negative values to indicate refunds.
      productId:
        type: string
        in: requestBody
        help: An identifier for the product.(You must send a price and quantity with this field.)
      revenueType:
        type: string
        in: requestBody
        help: Type of revenue.(example "tax", "refund")
      ip:
        type: string
        in: requestBody
        help: IP address of the user. Use "$remote" to use your server's IP address. We will then use the collected IP address to reverse lookup a user's location user properties (City, Country, Region, and DMA).
      locationLat:
        type: float
        in: requestBody
        help: Provide domain to check availability.
      locationLng:
        type: float
        in: requestBody
        help: Provide domain to check availability.
    output:
      type: object
      contentType: application/json
      properties:
        success:
          help: Returns true/false.
          type: string
        message:
          help: Notification sent message or error message if occurred.
          type: string
        statusCode:
          help: Returns http status code.
          type: int
environment:
  API_KEY:
    type: string
    required: true
    help: API Key of GoDaddy